{"version":3,"sources":["assets\\Script\\home_control.js"],"names":["cc","Class","Component","properties","hoverColor","Color","defaultColor","onLoad","currentIndex","initContent","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onKeyDown","start","vv","Enum","require","Global","Config","UserInfo","Tools","Audio","onDestroy","off","console","log","event","keyCode","macro","KEY","up","buttons","length","updateButtonState","down","enter","selectButton","_this","find","getComponentsInChildren","Button","forEach","button","index","label","node","getComponentInChildren","Label","pick","getChildByName","color","active","loadScene","scene","armatureDisplay","getComponent","dragonBones","ArmatureDisplay","armature","animation","hasAnimation","playAnimation","addEventListener","EventObject","COMPLETE","director","updateButtonEvent","_this2","onButtonClicked","bind"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n\r\n\r\n\r\n        hoverColor: cc.Color,\r\n        defaultColor: cc.Color,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.currentIndex = 0\r\n        this.initContent()\r\n\r\n        // Listen for keyboard events\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this)\r\n\r\n    },\r\n\r\n    start () {\r\n        \r\n        cc.vv = {}\r\n\r\n        let Enum = require('Enum')\r\n        cc.vv.Enum = new Enum()\r\n        let Global = require('Global')\r\n        cc.vv.Global = new Global()\r\n        let Config = require('Config')\r\n        cc.vv.Config = new Config()\r\n        let UserInfo = require('UserInfo')\r\n        cc.vv.UserInfo = new UserInfo()\r\n        let Tools = require('Tools')\r\n        cc.vv.Tools = new Tools()\r\n        let Audio = require('Audio')\r\n        cc.vv.Audio = new Audio()\r\n\r\n    },\r\n\r\n\r\n    onDestroy(){\r\n        // Clean up the event listener when the component is destroyed\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        console.log('home destroy')\r\n    },\r\n\r\n    onKeyDown(event) {\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.up:\r\n                this.currentIndex = (this.currentIndex - 1 + this.buttons.length) % this.buttons.length\r\n                this.updateButtonState()\r\n                break\r\n            case cc.macro.KEY.down:\r\n                this.currentIndex = (this.currentIndex + 1) % this.buttons.length\r\n                this.updateButtonState()\r\n                break\r\n            case cc.macro.KEY.enter:\r\n                this.selectButton()\r\n                break\r\n        }\r\n    },\r\n\r\n    updateButtonState() {\r\n        // Lấy tất cả các button trong scene\r\n        this.buttons = cc.find('Canvas/Buttons').getComponentsInChildren(cc.Button)\r\n\r\n        // Reset all buttons to normal state\r\n        this.buttons.forEach((button, index) => {\r\n            let label = button.node.getComponentInChildren(cc.Label)\r\n            let pick = button.node.getChildByName('Background').getChildByName('TankPick')\r\n\r\n            if (label) {\r\n                if(index == this.currentIndex)\r\n                {\r\n                    label.node.color = this.hoverColor\r\n                    pick.active = true\r\n                }else\r\n                {\r\n                    label.node.color = this.defaultColor\r\n                    pick.active = false\r\n                };\r\n            }\r\n\r\n            // button.getComponent(cc.Button).interactable = (index == this.currentIndex)\r\n            // button.opacity = (index == this.currentIndex) ? 255 : 150 // Change opacity to indicate selected button\r\n        })\r\n    },\r\n\r\n    selectButton() {\r\n        // Perform the action for the currently selected button\r\n        switch(this.currentIndex) {\r\n            case 0:\r\n                cc.log(\"1 Player selected\");\r\n                this.loadScene(0, 'game_scene')\r\n                break;\r\n            case 1:\r\n                cc.log(\"2 Player selected\");\r\n                break;\r\n            case 2:\r\n                cc.log(\"Constructor selected\");\r\n                break;\r\n            case 3: \r\n                cc.log('Return menu selected')\r\n                this.loadScene(3, 'login_scene')\r\n                break\r\n        }\r\n    },\r\n\r\n    loadScene(index, scene){\r\n        this.armatureDisplay = this.buttons[index].node.getChildByName('Background').\r\n            getChildByName('TankPick').getComponent(dragonBones.ArmatureDisplay)\r\n\r\n        // Kiểm tra nếu armatureDisplay tồn tại và có animation 'Picked'\r\n        if (this.armatureDisplay && this.armatureDisplay.armature().animation.hasAnimation('Picked')) {\r\n            \r\n            this.armatureDisplay.playAnimation('Picked', 1);\r\n            this.armatureDisplay.addEventListener(dragonBones.EventObject.COMPLETE, () => {\r\n                // Sau khi animation kết thúc, chuyển scene\r\n                cc.director.loadScene(scene);\r\n            }, this);\r\n        } else {\r\n            cc.log(\"Không tìm thấy Armature hoặc Animation 'Picked'\");\r\n        }\r\n    },\r\n\r\n    initContent(){\r\n\r\n        this.updateButtonState()\r\n        this.updateButtonEvent()\r\n        \r\n    },\r\n\r\n    updateButtonEvent(){\r\n        this.buttons = cc.find('Canvas/Buttons').getComponentsInChildren(cc.Button)\r\n        this.buttons.forEach((button, index) => {\r\n            button.node.on('click', this.onButtonClicked.bind(this, index), this);\r\n        })\r\n\r\n        \r\n\r\n    },\r\n    onButtonClicked: function(index) {\r\n        cc.log(\"Button clicked: \" + index);\r\n        // Xử lý sự kiện khi click vào button\r\n        this.currentIndex = index\r\n        this.updateButtonState()\r\n        this.selectButton()\r\n    }\r\n\r\n\r\n\r\n\r\n});\r\n"]}